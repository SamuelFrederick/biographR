% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_columns.R,
%   R/clean_columns_function_call.R
\name{clean_columns}
\alias{clean_columns}
\alias{clean_columns_function_call}
\title{Clean a series of columns using ChatGPT by mapping data into new categories and formats}
\usage{
clean_columns(
  data,
  column_values,
  column_formats,
  prompt_fewshot = NULL,
  prompt_fewshot_type = "specific",
  prompt_fewshot_n = 1,
  openai_api_key = NULL,
  openai_model = "gpt-3.5-turbo",
  openai_temperature = 0,
  openai_seed = NULL
)

clean_columns_function_call(
  data,
  column_values,
  column_formats,
  column_descriptions = NULL,
  prompt_fewshot = NULL,
  prompt_fewshot_n = 1,
  openai_api_key = NULL,
  openai_model = "gpt-3.5-turbo",
  openai_temperature = 0,
  openai_seed = NULL,
  openai_context_window = 4096
)
}
\arguments{
\item{data}{The data to be processed}

\item{column_values}{A named list with column names from data as names and values as vectors with the desired categories for the corresponding column}

\item{column_formats}{A named list with column names from data as names and values as strings with the desired format for the corresponding column}

\item{prompt_fewshot}{A data.frame, tibble, or named list containing example inputs and example outputs (names from input example with suffix "_gpt")
Example: list(education = c("J.D.", "BA", "GED", "Did not graduate high school"),
education_gpt = c("Graduate School", "College, "High School or less", "High School or less"))}

\item{prompt_fewshot_type}{Only for \code{clean_columns()}. A string, one of "specific" or "general", defaults to "specific".
If type is "specific", prompt_fewshot must have column names from data, and few-shot examples should correspond to the specific columns from the data.
If type is "general", examples in prompt_fewshot will be reused for each column. It is recommended that the few-shot examples in prompt_fewshot include example values or formats as well with suffix _values and _formats.}

\item{prompt_fewshot_n}{An integer or named list of integers (with names from example inputs in prompt_fewshot) giving the number of segments to divide each example input into. For example, prompt_fewshot_n=2 would divide inputted example vectors into two separate example prompts and outputs.
Note: for \code{clean_columns_function_call()}, this must be an integer.}

\item{openai_api_key}{API key for OpenAI, a string. If this is NULL, \code{clean_columns()} searches .Renviron for API key.}

\item{openai_model}{ChatGPT model to use, defaults to "chatgpt-3.5-turbo"}

\item{openai_temperature}{Specifies the amount of randomness in ChatGPT, a number between 0 and 2 with more randomness for higher numbers, defaults to 0}

\item{openai_seed}{An integer, specifies a random seed for ChatGPT (this is in the development stage at OpenAI, so it might not work perfectly)}

\item{column_descriptions}{Only for \code{clean_columns_function_call()}. A named list with column names from data as names and values as strings with the desired description for the column}

\item{openai_context_window}{Only for \code{clean_columns_function_call()}. An integer, defaults to 4,096, specifies the context window for the ChatGPT model in use.
This is used to determine whether to split the columns to be cleaned into several portions. Note: this is a rough approximation of whether the prompt is too long. It is best to split your data into parts if needed or to use larger GPT models.}
}
\value{
Data with new columns for each entry in column_values containing new mappings
}
\description{
Maps old data in names of column_values to new categories and formats using ChatGPT.
\code{clean_columns()} returns data with new columns corresponding to matched and reformatted
values. This can be helpful for processing messy or unstructured text data
in a column (e.g., open-ended survey responses, names, etc.). \code{clean_columns()}
is particularly helpful for post-processing the output of \code{\link[=get_bio]{get_bio()}}.

\code{clean_columns()} uses the standard chat completion to reformat columns. It makes separate API calls for each column.
\code{clean_columns_function_call()} uses function calling to reformat columns. It tries to complete as many columns as possible in a single API call.
}
\examples{
df <- data.frame(age = rnorm(4, 50, 10),
                 education = c("BA", "B.A.", "High School", "MBA"),
                 name = c("Wardell Stephen Curry II", "Michael J Jordan",
                 "James, LEBRON", "Shaq"))
clean_columns(data = df,
              column_values = list(education = c("High School", "College",
                                                 "Graduate School"),
                                   name = c("Steph Curry", "Michael Jordan",
                                            "LeBron James", "Shaquille O'Neal")))

clean_columns(data = data.frame(birthday = c("08-13-1923",
                                             "05/15/1976",
                                             "March 13, 1998",
                                             "19th of March in 1994")),
              column_formats = list(birthday = "{MM}/{DD}/{YYYY}"))
clean_columns_function_call(data = df,
                            column_values = list(education = c("High School or less",
                                                               "College",
                                                               "Graduate School")))
}
