[{"path":"https://samuelfrederick.github.io/biographR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 biographR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://samuelfrederick.github.io/biographR/articles/Cleaning-Columns.html","id":"using-clean_columns","dir":"Articles","previous_headings":"","what":"Using clean_columns()","title":"Cleaning Columns","text":"can start cleaning data using clean_columns() function. addition usual API specifications (API key, model, temperature, seed), clean_columns() takes three main arguments: data, column_values, column_formats. data argument contains dataset want clean. column_values column_formats lists, named names columns want process containing desired output values formats. example, education column might use column_values argument pass list list(education = c(\"High School less\", \"College\", \"Graduate School\")). clean_columns() use ChatGPT attempt match educational data values. column_formats, birthdate column, might pass list(birthdate = \"MM/DD/YYYY\") column_formats argument. clean_columns() function makes separate API calls column cleaned, outputs original dataset cleaned columns denoted “_gpt” suffix.","code":"clean_columns(data = df,               column_values = list(education = c(\"High School or less\", \"College\", \"Graduate School\")),               column_formats = list(birthdate = \"MM/DD/YYYY\")) #> education #> Input Tokens: 116 #> Output Tokens:154 #> Total Tokens:270 #> birthdate #> Input Tokens: 144 #> Output Tokens:74 #> Total Tokens:218 #> # A tibble: 7 × 4 #>   education           birthdate           education_gpt       birthdate_gpt #>   <chr>               <chr>               <chr>               <chr>         #> 1 BA                  Sept. 19th, 1974    College             09/19/1974    #> 2 B.A.                October 20, 1963    College             10/20/1963    #> 3 GED                 3.12.1987           High School or less 03/12/1987    #> 4 Ph.D.               15 of April in 1990 Graduate School     04/15/1990    #> 5 MD                  7/6/81              Graduate School     07/06/1981    #> 6 Master's            3rd of August, 1953 Graduate School     08/03/1953    #> 7 High School Diploma 2/14/1934           High School or less 02/14/1934"},{"path":"https://samuelfrederick.github.io/biographR/articles/Cleaning-Columns.html","id":"few-shot-prompting-with-clean_columns","dir":"Articles","previous_headings":"Using clean_columns()","what":"Few-Shot Prompting with clean_columns()","title":"Cleaning Columns","text":"three key arguments -shot prompting clean_columns(): prompt_fewshot_type, prompt_fewshot_n, prompt_fewshot. First, prompt_fewshot_type either “specific” “general”. value “specific” indicates provided examples specific columns want clean. example, provide examples education birthdate, clean_columns() use education examples -shot prompting education cleaning use birthdate examples -shot prompting birthdate cleaning. value “general” indicates provided examples specific columns want clean. examples used -shot prompting every column API call. example, education birthdate examples used -shot prompting education cleaning. generally recommend using prompt_fewshot_type=\"specific\" (default value), unless compelling reason . Second, prompt_fewshot_n tells clean_columns() whether want split -shot examples multiple example prompts outputs. example, provide 10 examples education, setting prompt_fewshot_n=2 split 10 examples two separate example prompts outputs ChatGPT. can give different values different columns passing named list prompt_fewshot_n (e.g., list(education = 2, birthdate = 4)). Third, prompt_fewshot contains examples column cleaning. clean_columns(), can list, tibble, data.frame. contain example input example output (name input suffix “_gpt”). prompt_fewshot_type “general”, might also want input values formats examples; separate columns list entries suffixes “_values” “_formats”, respectively.","code":""},{"path":"https://samuelfrederick.github.io/biographR/articles/Cleaning-Columns.html","id":"specific-few-shot-example","dir":"Articles","previous_headings":"Using clean_columns() > Few-Shot Prompting with clean_columns()","what":"Specific Few-Shot Example","title":"Cleaning Columns","text":"","code":"clean_columns(data = df,               column_values = list(education = c(\"High School or less\", \"College\", \"Graduate School\")),               prompt_fewshot_type = \"specific\",               prompt_fewshot_n = 1,               prompt_fewshot = data.frame(education = c(\"GED\", \"BA\", \"MPhil\", \"BS\", \"Bachelor's\", \"10th grade\"),                                           education_gpt = c(\"High School or less\", \"College\", \"Graduate School\", \"College\", \"College\", \"High School or less\"))) #> education #> Input Tokens: 205 #> Output Tokens:31 #> Total Tokens:236 #> # A tibble: 7 × 3 #>   education           birthdate           education_gpt       #>   <chr>               <chr>               <chr>               #> 1 BA                  Sept. 19th, 1974    College             #> 2 B.A.                October 20, 1963    College             #> 3 GED                 3.12.1987           High School or less #> 4 Ph.D.               15 of April in 1990 Graduate School     #> 5 MD                  7/6/81              Graduate School     #> 6 Master's            3rd of August, 1953 Graduate School     #> 7 High School Diploma 2/14/1934           High School or less"},{"path":"https://samuelfrederick.github.io/biographR/articles/Cleaning-Columns.html","id":"general-few-shot-example","dir":"Articles","previous_headings":"Using clean_columns() > Few-Shot Prompting with clean_columns()","what":"General Few-Shot Example","title":"Cleaning Columns","text":"","code":"clean_columns(data = df,               column_values = list(education = c(\"High School or less\", \"College\", \"Graduate School\")),               prompt_fewshot_type = \"general\",               prompt_fewshot_n = 1,               prompt_fewshot = list(education = c(\"GED\", \"BA\", \"MPhil\"),                                     education_gpt = c(\"High School or less\", \"College\", \"Graduate School\"),                                     education_values = c(\"High School or less\", \"College\", \"Graduate School\"),                                     birthdate = c(\"August 9, 1978\", \"Oct 10, 1935\", \"11th of January 1957\"),                                     birthdate_gpt = c(\"08/09/1978\", \"10/10/1935\", \"01/11/1957\"),                                     birthdate_format = \"MM/DD/YYYY\")) #> education #> Input Tokens: 277 #> Output Tokens:31 #> Total Tokens:308 #> # A tibble: 7 × 3 #>   education           birthdate           education_gpt       #>   <chr>               <chr>               <chr>               #> 1 BA                  Sept. 19th, 1974    College             #> 2 B.A.                October 20, 1963    College             #> 3 GED                 3.12.1987           High School or less #> 4 Ph.D.               15 of April in 1990 Graduate School     #> 5 MD                  7/6/81              Graduate School     #> 6 Master's            3rd of August, 1953 Graduate School     #> 7 High School Diploma 2/14/1934           High School or less"},{"path":"https://samuelfrederick.github.io/biographR/articles/Cleaning-Columns.html","id":"using-clean_columns_function_call","dir":"Articles","previous_headings":"","what":"Using clean_columns_function_call()","title":"Cleaning Columns","text":"can also use ChatGPT’s function calling feature provides ChatGPT overview “function.” ChatGPT extracts data corresponding arguments function returns arguments, user can enter arguments function. implemented column cleaning using clean_columns_function_call() function. clean_columns_function_call() broadly similar clean_columns() four main differences: adds optional column_descriptions argument , like column_values column_formats, named list characters names columns data. values descriptions arguments function call, desired. example, may wish describe exactly cleaned column apart values formats. take prompt_fewshot_type argument. prompt_fewshot_n must integer. adds optional openai_context_window argument. clean_columns_function_call() tries clean columns one API call, column combinations might larger can processed ChatGPT. case, clean_columns_function_call() tries break columns separate API calls smaller context window. Now, can try using clean_columns_function_call() data:","code":"clean_columns_function_call(data = df,               column_values = list(education = c(\"High School or less\", \"College\", \"Graduate School\")),               column_formats = list(birthdate = \"MM/DD/YYYY\")) #> education, birthdate #> Input Tokens: 269 #> Output Tokens: 99 #> Total Tokens: 368 #> # A tibble: 7 × 4 #>   education           birthdate           education_gpt       birthdate_gpt #>   <chr>               <chr>               <chr>               <chr>         #> 1 BA                  Sept. 19th, 1974    College             09/19/1974    #> 2 B.A.                October 20, 1963    College             10/20/1963    #> 3 GED                 3.12.1987           High School or less 12/03/1987    #> 4 Ph.D.               15 of April in 1990 Graduate School     04/15/1990    #> 5 MD                  7/6/81              Graduate School     07/06/1981    #> 6 Master's            3rd of August, 1953 Graduate School     08/03/1953    #> 7 High School Diploma 2/14/1934           High School or less 02/14/1934"},{"path":"https://samuelfrederick.github.io/biographR/articles/Cleaning-Columns.html","id":"few-shot-prompting-with-clean_columns_function_call","dir":"Articles","previous_headings":"Using clean_columns_function_call()","what":"Few-Shot Prompting with clean_columns_function_call()","title":"Cleaning Columns","text":"Like clean_columns(), clean_columns_function_call() also supports -shot prompting, may improve output. details specifics -shot prompting, see [-Shot Prompting `clean_columns_function_call()].","code":"clean_columns_function_call(data = df,               column_values = list(education = c(\"High School or less\", \"College\", \"Graduate School\")),               column_formats = list(birthdate = \"MM/DD/YYYY\"),                prompt_fewshot = list(education = c(\"GED\", \"BA\", \"MPhil\"),                                      education_gpt = c(\"High School or less\", \"College\", \"Graduate School\"),                                     birthdate = c(\"August 9, 1978\", \"Oct 10, 1935\", \"11th of January 1957\"),                                     birthdate_gpt = c(\"08/09/1978\", \"10/10/1935\", \"01/11/1957\"))) #> education, birthdate #> Input Tokens: 408 #> Output Tokens: 80 #> Total Tokens: 488 #> # A tibble: 7 × 4 #>   education           birthdate           education_gpt       birthdate_gpt #>   <chr>               <chr>               <chr>               <chr>         #> 1 BA                  Sept. 19th, 1974    College             09/19/1974    #> 2 B.A.                October 20, 1963    College             10/20/1963    #> 3 GED                 3.12.1987           High School or less 12/03/1987    #> 4 Ph.D.               15 of April in 1990 Graduate School     04/15/1990    #> 5 MD                  7/6/81              Graduate School     07/06/1981    #> 6 Master's            3rd of August, 1953 Graduate School     08/03/1953    #> 7 High School Diploma 2/14/1934           High School or less 02/14/1934"},{"path":"https://samuelfrederick.github.io/biographR/articles/Improving-model-output.html","id":"hand-coding-data","dir":"Articles","previous_headings":"","what":"Hand-Coding Data","title":"Improving model output","text":"generally good practice hand-code random sample data. can help several ways. First, gives idea type information can extract data. information hand, can decide input functions like get_bio(). Second, hand-coding give dataset can evaluate performance output ChatGPT. Third, can use data inputs -shot prompting can help improve output ChatGPT.","code":""},{"path":"https://samuelfrederick.github.io/biographR/articles/Improving-model-output.html","id":"changing-model-version","dir":"Articles","previous_headings":"","what":"Changing Model Version","title":"Improving model output","text":"biographR defaults gpt-3.5-turbo less expensive gpt-4 generally performs quite well. However, models like gpt-4 gpt-4-1106-preview can give better performance. particular, GPT-4 models perform better function calling, according OpenAI , anecdotally, appear better job extracting subtler information like gender pronouns. can change model ’re using biographR openai_model argument.","code":""},{"path":"https://samuelfrederick.github.io/biographR/articles/Improving-model-output.html","id":"few-shot","dir":"Articles","previous_headings":"","what":"Few-Shot Prompting","title":"Improving model output","text":"ChatGPT output can also improved providing ChatGPT exemplars task want complete – known “-shot” prompting. another way hand-coded biographical texts can come handy: give examples improve ChatGPT responses. -shot prompting supported biographR using prompt_fewshot argument get_bio() get_bio_function_call(). prompt_fewshot argument accepts data.frame tibble containing example bio, example bio_name (applicable), results every field prompt_fields argument. example, might three exemplars type information want. pass information prompt_fewshot argument form: can pass information one functions like (Joe Biden’s Wikipedia page):","code":"prompt_fewshot <- data.frame(   bio = c(\"John Smith went to Nowhere University where he earned his B.A.\",            \"Sally Smith went to Hogwarts where she studied magic and earned her BS in potions.\",            \"Adam Driver got his BFA from Juilliard.\"),    bio_name = c(\"John Smith\", \"Sally Smith\", \"Adam Driver\"),    gender = c(\"Male\", \"Female\", \"Male\"),    undergraduate_education = c(\"Nowhere University - Bachelor's\",                \"Hogwarts - Bachelor's\",               \"Juilliard - Bachelor's\") ) get_bio(bio = \"Joseph Robinette Biden Jr. is an American politician who is the 46th and current president of the United States. A member of the Democratic Party, he previously served as the 47th vice president from 2009 to 2017 under President Barack Obama and represented Delaware in the United States Senate from 1973 to 2009. Born in Scranton, Pennsylvania, Biden moved with his family to Delaware in 1953. He graduated from the University of Delaware before earning his law degree from Syracuse University.\",          bio_name = \"Joe Biden\",          prompt_fields = c(\"undergraduate_education\", \"gender\"),          prompt_fields_formats = list(undergraduate_education = \"{UNDERGRADUATE SCHOOL} - {DEGREE}\"),          prompt_fewshot = prompt_fewshot) #> Input Tokens: 595 #> Output Tokens: 17 #> Total Tokens: 612 #> # A tibble: 1 × 2 #>   undergraduate_education             gender #>   <chr>                               <chr>  #> 1 University of Delaware - Bachelor's Male"},{"path":"https://samuelfrederick.github.io/biographR/articles/Improving-model-output.html","id":"custom-prompts","dir":"Articles","previous_headings":"","what":"Custom Prompts","title":"Improving model output","text":"can hard design perfect prompt, different tasks might require different approaches. get_bio() function supports adding unique prompts override default prompt argument. custom prompt supplied, output function unprocessed (.e., get_bio() won’t output tibble), can specify whichever form output prefer.","code":"get_bio(bio = \"Joseph Robinette Biden Jr. is an American politician who is the 46th and current president of the United States. A member of the Democratic Party, he previously served as the 47th vice president from 2009 to 2017 under President Barack Obama and represented Delaware in the United States Senate from 1973 to 2009. Born in Scranton, Pennsylvania, Biden moved with his family to Delaware in 1953. He graduated from the University of Delaware before earning his law degree from Syracuse University.\",          bio_name = \"Joe Biden\",          prompt = \"Return ONLY a CSV format containing the gender and highest level of education for Joe Biden with columns 'gender' and 'highest_level_of_education'\"         ) #> Warning: Custom prompt provided, bio_name argument will be ignored. #> Input Tokens: 166 #> Output Tokens: 12 #> Total Tokens: 178 #> [1] \"gender,highest_level_of_education\\nMale,Law degree\""},{"path":"https://samuelfrederick.github.io/biographR/articles/Improving-model-output.html","id":"post-processing-output","dir":"Articles","previous_headings":"","what":"Post-Processing Output","title":"Improving model output","text":"fifth approach can take improve output involves post-processing results. example, gather data bunch biographies, may end data common format (e.g., calling Bachelor’s degree B.., B.S., B.F.., Bachelor’s, etc.). can, course, post-process data using regex even hand, can also use ChatGPT post-process data. clean_columns() function implements post-processing data.","code":"example_data <- data.frame(highest_level_of_education = c(\"B.A.\", \"BA\", \"BFA\", \"Ph.D.\", \"Master's\"),                             state_of_birth = c(\"CA\", \"Calif.\", \"California\", \"NY\", \"New York\")) clean_columns(data = example_data,                column_values = list(highest_level_of_education = c(\"High School or less\", \"College\", \"Graduate School\"),                                     state_of_birth = c(\"CA\", \"NY\"))) #> highest_level_of_education #> Input Tokens: 119 #> Output Tokens:113 #> Total Tokens:232 #> state_of_birth #> Input Tokens: 106 #> Output Tokens:25 #> Total Tokens:131 #> # A tibble: 5 × 4 #>   highest_level_of_education state_of_birth highest_level_of_education_gpt #>   <chr>                      <chr>          <chr>                          #> 1 B.A.                       CA             College                        #> 2 BA                         Calif.         College                        #> 3 BFA                        California     College                        #> 4 Ph.D.                      NY             Graduate School                #> 5 Master's                   New York       Graduate School                #> # ℹ 1 more variable: state_of_birth_gpt <chr>"},{"path":"https://samuelfrederick.github.io/biographR/articles/Improving-model-output.html","id":"combination-of-approaches","dir":"Articles","previous_headings":"","what":"Combination of Approaches","title":"Improving model output","text":"Finally, can combine approaches produce better output: can use advanced GPT models -shot-prompting, custom prompts, post-processing data. users always check output models: hand-coding data can allow assess accuracy ChatGPT output.","code":""},{"path":"https://samuelfrederick.github.io/biographR/articles/get_bio.html","id":"unstructured-biographical-text","dir":"Articles","previous_headings":"","what":"Unstructured Biographical Text","title":"get_bio","text":"often work unstructured text want extract specific structured data text. read text extract desired information manually; however, time-consuming infeasible larger numbers texts. function get_bio() allows us extract desired data unstructured texts using ChatGPT API. don’t API Key ChatGPT, create one OpenAI attempting use package. simplicity, can save API key .Renviron (Note: function usethis::edit_r_environ() may helpful ). example, can scrape biography actor Adam Driver Wikipedia using rvest package.","code":"if(rlang::is_installed(\"rvest\")) {   driver_bio <- rvest::read_html(\"https://en.wikipedia.org/wiki/Adam_Driver\")|>      rvest::html_elements(xpath = \"//h2/span[@id='Early_life']/parent::*/following-sibling::*\")   driver_bio <- paste(rvest::html_text2(driver_bio[2:5]), collapse = \" \")   driver_bio } else{   driver_bio <- \"Driver was born on November 19, 1983,[5] in San Diego, California,[6] the son of Nancy Wright (née Needham), a paralegal, and Joe Douglas Driver.[7][8] Director Terry Gilliam has claimed that Driver has Native American ancestry,[9] though Driver has no known Native American ancestors. His father's family is from Arkansas, and his mother's family is from Indiana. His stepfather, Rodney G. Wright, is a minister at a Baptist church.[10][11] When Driver was seven years old, he moved with his older sister and mother to his mother's hometown Mishawaka, Indiana, where he graduated from Mishawaka High School in 2001.[12][13] Driver was raised Baptist, and sang in the choir at church.[14] Driver has described his teenage self as a \\\"misfit\\\"; he told M Magazine that he climbed radio towers, set objects on fire, and co-founded a fight club with friends, inspired by the 1999 film Fight Club.[15] After high school, he worked as a door-to-door salesman selling Kirby vacuum cleaners and as a telemarketer for a basement waterproofing company and Ben Franklin Construction.[16] He applied to the Juilliard School for drama but was not accepted.[17] Shortly after the September 11 attacks, Driver enlisted in the United States Marine Corps.[5] He was assigned to Weapons Company, 1st Battalion, 1st Marines as an 81mm mortar man.[18] He served for two years and eight months before fracturing his sternum while mountain biking.[19] He was medically discharged with the rank of Lance Corporal. Subsequently, Driver attended the University of Indianapolis for a year before auditioning again for Juilliard, this time succeeding. He got the news he was accepted while at work at the Target Distribution Center in Indianapolis. Driver has said that his classmates saw him as an intimidating and volatile figure, and he struggled to fit into a lifestyle so different from the Marines.[15] He was a member of the Drama Division's Group 38 from 2005 to 2009, where he met his future wife, Joanne Tucker. He graduated with a Bachelor of Fine Arts in 2009.[20]\" } #> [1] \"Driver was born on November 19, 1983,[5] in San Diego, California,[6] the son of Nancy Wright (née Needham), a paralegal, and Joe Douglas Driver.[7][8] Director Terry Gilliam has claimed that Driver has Native American ancestry,[9] though Driver has no known Native American ancestors. His father's family is from Arkansas, and his mother's family is from Indiana. His stepfather, Rodney G. Wright, is a minister at a Baptist church.[10][11] When Driver was seven years old, he moved with his older sister and mother to his mother's hometown Mishawaka, Indiana, where he graduated from Mishawaka High School in 2001.[12][13] Driver was raised Baptist, and sang in the choir at church.[14] Driver has described his teenage self as a \\\"misfit\\\"; he told M Magazine that he climbed radio towers, set objects on fire, and co-founded a fight club with friends, inspired by the 1999 film Fight Club.[15] After high school, he worked as a door-to-door salesman selling Kirby vacuum cleaners and as a telemarketer for a basement waterproofing company and Ben Franklin Construction.[16] He applied to the Juilliard School for drama but was not accepted.[17] Shortly after the September 11 attacks, Driver enlisted in the United States Marine Corps.[5] He was assigned to Weapons Company, 1st Battalion, 1st Marines as an 81mm mortar man.[18] He served for two years and eight months before fracturing his sternum while mountain biking.[19] He was medically discharged with the rank of Lance Corporal. Subsequently, Driver attended the University of Indianapolis for a year before auditioning again for Juilliard, this time succeeding. He got the news he was accepted while at work at the Target Distribution Center in Indianapolis. Driver has said that his classmates saw him as an intimidating and volatile figure, and he struggled to fit into a lifestyle so different from the Marines.[15] He was a member of the Drama Division's Group 38 from 2005 to 2009, where he met his future wife, Joanne Tucker. He graduated with a Bachelor of Fine Arts in 2009.[20]\""},{"path":"https://samuelfrederick.github.io/biographR/articles/get_bio.html","id":"using-get_bio-to-extract-data","dir":"Articles","previous_headings":"","what":"Using get_bio() to extract data","title":"get_bio","text":"Now real example unstructured biography, can decide information want extract text. practice, ’s helpful read sample unstructured texts find type information tends included texts create gold standard set information check ChatGPT output. Adam Driver biography Wikipedia contains variety information might interesting potential study (date birth, place birth, college, military experience, marriage, etc.). use get_bio() function call ChatGPT’s API extract information. get_bio() function five key arguments: bio, bio_name, prompt_fields, prompt_formats, prompt_values. bio must contain biographical text want extract data. bio_name optional recommended used specify individual ChatGPT get information . put desired biographical information fields prompt_fields argument character vector. names prompt_fields informative (people reading fields able understand specific information want field contain). example, names might something like c(birthdate, town_of_birth). don’t pass information prompt_fields argument, function returns default biographical fields: birth_date, highest_level_of_education, college, graduate_school, previous_occupation, gender, town_of_birth, state_of_birth, married. certain fields, might want information returned specific format (e.g., dates MM/DD/YYYY format); can pass information prompt_fields_formats argument named list names corresponding values prompt_fields. example, pass prompt_fields_arguments=list(birthdate=\"MM/DD/YYYY\") instruct ChatGPT proper birthdate formatting. Finally, might want restrict certain fields take certain values: prompt_fields_values argument allows us pass information named list vectors acceptable values field vector. example, pass prompt_fields_values=list(education=c(\"High School less\", \"College\", \"Graduate School\")) tell ChatGPT want education information one three values.","code":"get_bio(bio = driver_bio,         bio_name = \"Adam Driver\",         prompt_fields = c(\"birth_date\", \"town_of_birth\", \"state_of_birth\",                           \"college\", \"religion\", \"military_experience\",                           \"married\"),         prompt_fields_formats = list(birth_date = \"{MM}/{DD}/{YYYY}\",                                     college = \"{SCHOOL} - {DEGREE}\"),         prompt_fields_values = list(military_experience = c(\"Yes\", \"No\"),                                     married = c(\"Yes\", \"No\"))) #> Input Tokens: 607 #> Output Tokens: 82 #> Total Tokens: 689 #> # A tibble: 1 × 7 #>   birth_date town_of_birth state_of_birth college   religion military_experience #>   <chr>      <chr>         <chr>          <chr>     <chr>    <chr>               #> 1 11/19/1983 San Diego     California     Universi… Baptist  Yes                 #> # ℹ 1 more variable: married <chr>"},{"path":"https://samuelfrederick.github.io/biographR/articles/get_bio.html","id":"custom-prompts-with-get_bio","dir":"Articles","previous_headings":"Using get_bio() to extract data","what":"Custom Prompts with get_bio()","title":"get_bio","text":"like, can input custom prompt get_bio() using prompt argument, override defaults. input custom prompt, include applicable information prompt_fields, prompt_fields_formats, prompt_fields_values arguments custom prompt.","code":""},{"path":"https://samuelfrederick.github.io/biographR/articles/get_bio.html","id":"few-shot-prompting-with-get_bio","dir":"Articles","previous_headings":"Using get_bio() to extract data","what":"Few-Shot Prompting with get_bio()","title":"get_bio","text":"can also use -shot prompting get_bio() prompt_fewshot argument. prompt_fewshot argument data.frame tibble contains example bios column called “bio”, example names column called “bio_name” (desired), example outputs prompt_fields applicable columns. get_bio() example , -shot prompting might look something like :","code":"fewshot_example <- data.frame(bio = \"John Smith was born on the thirteenth of October in 1992 in St. Louis, MO. He went on to earn his Bachelor of Arts degree from Invisible University where he met his wife, Marie. Raised as a Quaker, he was opposed to entering the military.\",                                bio_name = \"John Smith\",                                birth_date = \"10/13/1992\",                                town_of_birth = \"St. Louis\",                                state_of_birth = \"Missouri\",                                college = \"Invisible University - B.A.\",                                religion = \"Quaker\",                                military_experience = \"No\",                                married = \"Yes\")  get_bio(bio = driver_bio,         bio_name = \"Adam Driver\",         prompt_fields = c(\"birth_date\", \"town_of_birth\", \"state_of_birth\",                           \"college\", \"religion\", \"military_experience\",                           \"married\"),         prompt_fields_formats = list(birth_date = \"{MM}/{DD}/{YYYY}\",                                     college = \"{SCHOOL} - {DEGREE}\"),         prompt_fields_values = list(military_experience = c(\"Yes\", \"No\"),                                     married = c(\"Yes\", \"No\")),          prompt_fewshot = fewshot_example) #> Input Tokens: 835 #> Output Tokens: 61 #> Total Tokens: 896 #> # A tibble: 1 × 7 #>   birth_date town_of_birth state_of_birth college   religion military_experience #>   <chr>      <chr>         <chr>          <chr>     <chr>    <chr>               #> 1 11/19/1983 San Diego     California     Universi… Baptist  Yes                 #> # ℹ 1 more variable: married <chr>"},{"path":"https://samuelfrederick.github.io/biographR/articles/get_bio.html","id":"using-get_bio_function_call-to-extract-data","dir":"Articles","previous_headings":"","what":"Using get_bio_function_call() to extract data","title":"get_bio","text":"ChatGPT also supports different type prompting known function calling. type prompting can helpful extracting structured information user input. function get_bio_function_call() allows us use function call extract biographical data. Function calling essentially tells ChatGPT function takes specific arguments, want extract arguments input. Function call prompts take three types information function argument want extract: type object want argument (kept string biographR simplicity), possible values argument (passed prompt_fields_values argument get_bio_function_call()), description argument (combines elements prompt_fields_descriptions prompt_fields_formats). GPT 4 models appear somewhat better returning function call information correctly (according OpenAI). Turning back Adam Driver biography , can use ChatGPT function calling extract biographical information text.","code":"get_bio_function_call(bio = driver_bio,                        bio_name = \"Adam Driver\",                        prompt_fields = c(\"birth_date\", \"town_of_birth\",                                         \"state_of_birth\", \"college\",                                         \"religion\", \"military_experience\",                                         \"married\"),                       prompt_fields_formats = list(birth_date = \"{MM}/{DD}/{YYYY}\",                                                   college = \"{SCHOOL} - {DEGREE}\"),                       prompt_fields_values = list(military_experience = c(\"Yes\", \"No\"),                                                   married = c(\"Yes\", \"No\")),                        prompt_fields_descriptions = list(college = \"Information about the individual's college degree.\",                                                          religion = \"Information about any religious history the individual has.\")) #> Input Tokens: 758 #> Output Tokens: 92 #> Total Tokens: 850 #> # A tibble: 1 × 7 #>   birth_date town_of_birth state_of_birth college   religion military_experience #>   <chr>      <chr>         <chr>          <chr>     <chr>    <chr>               #> 1 11/19/1983 San Diego     California     Universi… Baptist  Yes                 #> # ℹ 1 more variable: married <chr>"},{"path":"https://samuelfrederick.github.io/biographR/articles/get_bio.html","id":"few-shot-prompting-with-get_bio_function_call","dir":"Articles","previous_headings":"Using get_bio_function_call() to extract data","what":"Few-Shot Prompting with get_bio_function_call()","title":"get_bio","text":"syntax -shot prompting get_bio_function_call() syntax get_bio(). input -shot examples data.frame tibble example biographical text column called “bio”, example biographical names column called “bio_name” (desired), example biographical data columns names prompt_fields. Looking example -Shot Prompting get_bio() section:","code":"fewshot_example <- data.frame(bio = \"John Smith was born on the thirteenth of October in 1992 in St. Louis, MO. He went on to earn his Bachelor of Arts degree from Invisible University where he met his wife, Marie. Raised as a Quaker, he was opposed to entering the military.\",                                bio_name = \"John Smith\",                                birth_date = \"10/13/1992\",                                town_of_birth = \"St. Louis\",                                state_of_birth = \"Missouri\",                                college = \"Invisible University - B.A.\",                                religion = \"Quaker\",                                military_experience = \"No\",                                married = \"Yes\")  get_bio_function_call(bio = driver_bio,         bio_name = \"Adam Driver\",         prompt_fields = c(\"birth_date\", \"town_of_birth\", \"state_of_birth\",                           \"college\", \"religion\", \"military_experience\",                           \"married\"),         prompt_fields_formats = list(birth_date = \"{MM}/{DD}/{YYYY}\",                                     college = \"{SCHOOL} - {DEGREE}\"),         prompt_fields_values = list(military_experience = c(\"Yes\", \"No\"),                                     married = c(\"Yes\", \"No\")),          prompt_fewshot = fewshot_example) #> Input Tokens: 951 #> Output Tokens: 71 #> Total Tokens: 1022 #> # A tibble: 1 × 7 #>   birth_date town_of_birth state_of_birth college   religion military_experience #>   <chr>      <chr>         <chr>          <chr>     <chr>    <chr>               #> 1 11/19/1983 San Diego     California     Universi… Baptist  Yes                 #> # ℹ 1 more variable: married <chr>"},{"path":"https://samuelfrederick.github.io/biographR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samuel Frederick. Author, maintainer.","code":""},{"path":"https://samuelfrederick.github.io/biographR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frederick S (2024). “biographR: Extracting Biographical Data Unstructured Text.” R package version 0.0.0.9000, https://github.com/SamuelFrederick/biographR.","code":"@Misc{,   title = {biographR: Extracting Biographical Data from Unstructured Text},   author = {Samuel Frederick},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/SamuelFrederick/biographR}, }"},{"path":"https://samuelfrederick.github.io/biographR/index.html","id":"biographr","dir":"","previous_headings":"","what":"Extract Biographical Data From Unstructured Text","title":"Extract Biographical Data From Unstructured Text","text":"biographR package designed help extract structured biographical data unstructured text using ChatGPT’s API.","code":""},{"path":"https://samuelfrederick.github.io/biographR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Biographical Data From Unstructured Text","text":"can install latest version biographR using following code:","code":"remotes::install_github(\"SamuelFrederick/biographR\")"},{"path":"https://samuelfrederick.github.io/biographR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extract Biographical Data From Unstructured Text","text":"Say biography individual named John Smith. biography might look something like: challenging extract structured biographical data John Smith text without reading text getting information hand. Instead, can use get_bio() function biographR package, calls ChatGPT’s API extract data us. can also customize output using prompt_fields_format prompt_fields_values arguments. Additionally, package defaults ChatGPT 3.5, ChatGPT 4 often appears perform somewhat better extracting subtler information (e.g., gender pronouns).","code":"John Smith graduated from Nowhere College with a B.A. in 1962.  He then went on to receive a Ph.D. from Nonexistent University.  At the same time, his wife, Sally Smith, was earning her M.D. from Invisible University. library(biographR) get_bio(bio = \"John Smith graduated from Nowhere College with a B.A. in 1962. He then went on to receive a Ph.D. from Nonexistent University. At the same time, his wife, Sally Smith, was earning her M.D. from Invisible University.\",          bio_name = \"John Smith\",          prompt_fields = c(\"college\", \"graduate_school\",                            \"highest_level_of_education\", \"gender\",                           \"married\")) #> # A tibble: 1 × 5 #>   college         graduate_school          highest_level_of_edu…¹ gender married #>   <chr>           <chr>                    <chr>                  <chr>  <chr>   #> 1 Nowhere College Nonexistent University;… Ph.D.                  \"\"     Sally … #> # ℹ abbreviated name: ¹​highest_level_of_education get_bio(bio = \"John Smith graduated from Nowhere College with a B.A. in 1962. He then went on to receive a Ph.D. from Nonexistent University. At the same time, his wife, Sally Smith, was earning her M.D. from Invisible University.\",          bio_name = \"John Smith\",          prompt_fields = c(\"college\", \"graduate_school\",                            \"highest_level_of_education\", \"gender\",                           \"married\"),          prompt_fields_format = list(college = \"{SCHOOL} - {DEGREE}\",                                      graduate_school = \"{SCHOOL} - {DEGREE}\",                                      highest_level_of_education = \"{DEGREE}\"),          prompt_fields_values = list(married = c(\"Yes\", \"No\")),          openai_model = \"gpt-4\") #> # A tibble: 1 × 5 #>   college                graduate_school   highest_level_of_edu…¹ gender married #>   <chr>                  <chr>             <chr>                  <chr>  <chr>   #> 1 Nowhere College - B.A. Nonexistent Univ… Ph.D.                  Male   Yes     #> # ℹ abbreviated name: ¹​highest_level_of_education"},{"path":"https://samuelfrederick.github.io/biographR/reference/biographR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"biographR: Extract Biographical Data From Unstructured Text — biographR-package","title":"biographR: Extract Biographical Data From Unstructured Text — biographR-package","text":"package uses ChatGPT process unstructured biographical information return data structured format desired fields.","code":""},{"path":[]},{"path":"https://samuelfrederick.github.io/biographR/reference/biographR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"biographR: Extract Biographical Data From Unstructured Text — biographR-package","text":"Maintainer: Samuel Frederick sdf2128@columbia.edu (ORCID)","code":""},{"path":"https://samuelfrederick.github.io/biographR/reference/clean_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean a series of columns using ChatGPT by mapping data into new categories and formats — clean_columns","title":"Clean a series of columns using ChatGPT by mapping data into new categories and formats — clean_columns","text":"Maps old data names column_values new categories formats using ChatGPT. clean_columns() returns data new columns corresponding matched reformatted values. can helpful processing messy unstructured text data column (e.g., open-ended survey responses, names, etc.). clean_columns() particularly helpful post-processing output get_bio(). clean_columns() uses standard chat completion reformat columns. makes separate API calls column. clean_columns_function_call() uses function calling reformat columns. tries complete many columns possible single API call.","code":""},{"path":"https://samuelfrederick.github.io/biographR/reference/clean_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean a series of columns using ChatGPT by mapping data into new categories and formats — clean_columns","text":"","code":"clean_columns(   data,   column_values,   column_formats,   prompt_fewshot = NULL,   prompt_fewshot_type = \"specific\",   prompt_fewshot_n = 1,   openai_api_key = NULL,   openai_model = \"gpt-3.5-turbo\",   openai_temperature = 0,   openai_seed = NULL )  clean_columns_function_call(   data,   column_values,   column_formats,   column_descriptions = NULL,   prompt_fewshot = NULL,   prompt_fewshot_n = 1,   openai_api_key = NULL,   openai_model = \"gpt-3.5-turbo\",   openai_temperature = 0,   openai_seed = NULL,   openai_context_window = 4096 )"},{"path":"https://samuelfrederick.github.io/biographR/reference/clean_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean a series of columns using ChatGPT by mapping data into new categories and formats — clean_columns","text":"data data processed column_values named list column names data names values vectors desired categories corresponding column column_formats named list column names data names values strings desired format corresponding column prompt_fewshot data.frame, tibble, named list containing example inputs example outputs (names input example suffix \"_gpt\") Example: list(education = c(\"J.D.\", \"BA\", \"GED\", \"graduate high school\"), education_gpt = c(\"Graduate School\", \"College, \"High School less\", \"High School less\")) prompt_fewshot_type clean_columns(). string, one \"specific\" \"general\", defaults \"specific\". type \"specific\", prompt_fewshot must column names data, -shot examples correspond specific columns data. type \"general\", examples prompt_fewshot reused column. recommended -shot examples prompt_fewshot include example values formats well suffix _values _formats. prompt_fewshot_n integer named list integers (names example inputs prompt_fewshot) giving number segments divide example input . example, prompt_fewshot_n=2 divide inputted example vectors two separate example prompts outputs. Note: clean_columns_function_call(), must integer. openai_api_key API key OpenAI, string. NULL, clean_columns() searches .Renviron API key. openai_model ChatGPT model use, defaults \"chatgpt-3.5-turbo\" openai_temperature Specifies amount randomness ChatGPT, number 0 2 randomness higher numbers, defaults 0 openai_seed integer, specifies random seed ChatGPT (development stage OpenAI, might work perfectly) column_descriptions clean_columns_function_call(). named list column names data names values strings desired description column openai_context_window clean_columns_function_call(). integer, defaults 4,096, specifies context window ChatGPT model use. used determine whether split columns cleaned several portions. Note: rough approximation whether prompt long. best split data parts needed use larger GPT models.","code":""},{"path":"https://samuelfrederick.github.io/biographR/reference/clean_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean a series of columns using ChatGPT by mapping data into new categories and formats — clean_columns","text":"Data new columns entry column_values containing new mappings","code":""},{"path":"https://samuelfrederick.github.io/biographR/reference/clean_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean a series of columns using ChatGPT by mapping data into new categories and formats — clean_columns","text":"","code":"df <- data.frame(age = rnorm(4, 50, 10),                  education = c(\"BA\", \"B.A.\", \"High School\", \"MBA\"),                  name = c(\"Wardell Stephen Curry II\", \"Michael J Jordan\",                  \"James, LEBRON\", \"Shaq\")) clean_columns(data = df,               column_values = list(education = c(\"High School\", \"College\",                                                  \"Graduate School\"),                                    name = c(\"Steph Curry\", \"Michael Jordan\",                                             \"LeBron James\", \"Shaquille O'Neal\"))) #> education #> Input Tokens: 106 #> Output Tokens:89 #> Total Tokens:195 #> name #> Input Tokens: 124 #> Output Tokens:37 #> Total Tokens:161 #> # A tibble: 4 × 5 #>     age education   name                     education_gpt   name_gpt         #>   <dbl> <chr>       <chr>                    <chr>           <chr>            #> 1  54.3 BA          Wardell Stephen Curry II College         Steph Curry      #> 2  44.5 B.A.        Michael J Jordan         College         Michael Jordan   #> 3  55.3 High School James, LEBRON            High School     LeBron James     #> 4  55.0 MBA         Shaq                     Graduate School Shaquille O'Neal  clean_columns(data = data.frame(birthday = c(\"08-13-1923\",                                              \"05/15/1976\",                                              \"March 13, 1998\",                                              \"19th of March in 1994\")),               column_formats = list(birthday = \"{MM}/{DD}/{YYYY}\")) #> birthday #> Input Tokens: 121 #> Output Tokens:47 #> Total Tokens:168 #> # A tibble: 4 × 2 #>   birthday              birthday_gpt #>   <chr>                 <chr>        #> 1 08-13-1923            08/13/1923   #> 2 05/15/1976            05/15/1976   #> 3 March 13, 1998        03/13/1998   #> 4 19th of March in 1994 03/19/1994   clean_columns_function_call(data = df,                             column_values = list(education = c(\"High School or less\",                                                                \"College\",                                                                \"Graduate School\"))) #> education #> Input Tokens: 182 #> Output Tokens: 23 #> Total Tokens: 205 #> # A tibble: 4 × 4 #>     age education   name                     education_gpt       #>   <dbl> <chr>       <chr>                    <chr>               #> 1  54.3 BA          Wardell Stephen Curry II College             #> 2  44.5 B.A.        Michael J Jordan         College             #> 3  55.3 High School James, LEBRON            High School or less #> 4  55.0 MBA         Shaq                     Graduate School"},{"path":"https://samuelfrederick.github.io/biographR/reference/get_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Get structured biographical data from unstructured text — get_bio","title":"Get structured biographical data from unstructured text — get_bio","text":"get_bio()() uses standard ChatGPT chat completions retrieve structured data input text allows fully customizable prompts. get_bio_function_call() uses ChatGPT function calling retrieve structured data input text.","code":""},{"path":"https://samuelfrederick.github.io/biographR/reference/get_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get structured biographical data from unstructured text — get_bio","text":"","code":"get_bio(   bio,   bio_name = NULL,   openai_api_key = NULL,   openai_model = \"gpt-3.5-turbo\",   openai_temperature = 0,   openai_seed = NULL,   prompt = NULL,   prompt_fields = NULL,   prompt_fields_formats = NULL,   prompt_fields_values = NULL,   prompt_fewshot = NULL )  get_bio_function_call(   bio,   bio_name = NULL,   openai_api_key = NULL,   openai_model = \"gpt-3.5-turbo\",   openai_temperature = 0,   openai_seed = NULL,   prompt_fields = NULL,   prompt_fields_formats = NULL,   prompt_fields_values = NULL,   prompt_fields_descriptions = NULL,   prompt_fewshot = NULL )"},{"path":"https://samuelfrederick.github.io/biographR/reference/get_bio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get structured biographical data from unstructured text — get_bio","text":"bio bio processed, string bio_name name individual whose biographical information desired, string. get_bio(), bio_name can vector strings containing names individuals biographical information desired openai_api_key API key OpenAI, string. NULL, get_bio() searches .Renviron API key. openai_model ChatGPT model use, defaults \"chatgpt-3.5-turbo\" openai_temperature number 0 2, specifies amount randomness ChatGPT, randomness higher numbers, defaults 0 openai_seed integer, pecifies random seed ChatGPT (development stage OpenAI, might work perfectly). prompt use get_bio(). string. desired, custom prompt. overrides default prompt include desired prompt fields, formats, values. prompt_fields character vector desired biographical output fields (e.g., \"college\", \"graduate_school\") prompt_fields_formats named list strings giving desired formats output fields (e.g., \"{SCHOOL} - {DEGREE}\"). Names present prompt_fields. prompt_fields_values named list character vectors desired output values prompt field. Names present prompt_fields. prompt_fewshot data.frame tibble complete example data. column called 'bio' containing unstructured example text, column called 'bio_name' containing name individual example (applicable), columns outputs every field prompt_fields get_bio() Example: data.frame(bio = \"John Smith went Nowhere University, graduated B..\", bio_name = \"John Smith\", gender = \"Male\", college = \"Nowhere University - B..\") prompt_fields_descriptions use get_bio_function_call(). named list strings additional text describing prompt field. Names present prompt_fields.","code":""},{"path":"https://samuelfrederick.github.io/biographR/reference/get_bio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get structured biographical data from unstructured text — get_bio","text":"tibble containing desired biographical information unprocessed API output custom prompt","code":""},{"path":"https://samuelfrederick.github.io/biographR/reference/get_bio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get structured biographical data from unstructured text — get_bio","text":"","code":"# Biographical Information about Kevin McCarthy from # https://bioguide.congress.gov/search/bio/M001165 get_bio(bio = \"MCCARTHY, KEVIN, a Representative from California;               born in Bakersfield, Kern County, Calif., January 26,               1965; graduated from Bakersfield High School,               Bakersfield, Calif., 1983; attended Bakersfield College,               Bakersfield. Calif., 1983-1986; B.S., California State               University, Bakersfield, Calif., 1989; M.B.A., California              State University, Bakersfield, Calif., 1994; staff,              United States Representative William Thomas of California,              1987-2002; member of the California state assembly,              2002-2007, minority leader, 2004-2006; elected as a              Republican to the One Hundred Tenth and to the eight              succeeding Congresses (January 3, 2007-present); majority              whip (One Hundred Twelfth and One Hundred Thirteenth              Congresses); majority leader (One Hundred Thirteenth              through One Hundred Fifteenth Congresses); minority              leader (One Hundred Sixteenth and One Hundred Seventeenth              Congress); Speaker of the House (One Hundred Eighteenth              Congress).\",       bio_name = \"Kevin McCarthy\") #> No prompt_fields argument provided. Defaulting to: birth_date, highest_level_of_education, college, graduate school, previous_occupation, gender, town_of_birth, state_of_birth, married. #> Input Tokens: 429 #> Output Tokens: 138 #> Total Tokens: 567 #> # A tibble: 1 × 9 #>   birth_date highest_level_of_educ…¹ college graduate_school previous_occupation #>   <chr>      <chr>                   <chr>   <chr>           <chr>               #> 1 01/26/1965 M.B.A.                  Bakers… California Sta… staff, United Stat… #> # ℹ abbreviated name: ¹​highest_level_of_education #> # ℹ 4 more variables: gender <chr>, town_of_birth <chr>, state_of_birth <chr>, #> #   married <chr>       get_bio_function_call(bio = \"MCCARTHY, KEVIN, a Representative from California;                                    born in Bakersfield, Kern County, Calif., January 26,                                    1965; graduated from Bakersfield High School,                                    Bakersfield, Calif., 1983; attended Bakersfield College,                                    Bakersfield. Calif., 1983-1986; B.S., California State                                    University, Bakersfield, Calif., 1989; M.B.A., California                                    State University, Bakersfield, Calif., 1994; staff,                                    United States Representative William Thomas of California,                                    1987-2002; member of the California state assembly,                                    2002-2007, minority leader, 2004-2006; elected as a                                    Republican to the One Hundred Tenth and to the eight                                    succeeding Congresses (January 3, 2007-present); majority                                    whip (One Hundred Twelfth and One Hundred Thirteenth                                    Congresses); majority leader (One Hundred Thirteenth                                    through One Hundred Fifteenth Congresses); minority                                    leader (One Hundred Sixteenth and One Hundred Seventeenth                                    Congress); Speaker of the House (One Hundred Eighteenth                                    Congress).\",                              bio_name = \"Kevin McCarthy\",                              prompt_fields = c(\"highest_level_of_education\",                                                  \"previous_occupation\", \"birth_date\"),                              prompt_fields_formats = list(highest_level_of_education = \"{DEGREE}\",                              previous_occupation = \"{OCCUPATION} - {YEARS}\",                              birth_date = \"{MM}/{DD}/{YYYY}\")) #> Input Tokens: 494 #> Output Tokens: 86 #> Total Tokens: 580 #> # A tibble: 1 × 3 #>   highest_level_of_education previous_occupation                      birth_date #>   <chr>                      <chr>                                    <chr>      #> 1 M.B.A.                     staff, United States Representative Wil… 01/26/1965"},{"path":"https://samuelfrederick.github.io/biographR/news/index.html","id":"biographr-development-version","dir":"Changelog","previous_headings":"","what":"biographR (development version)","title":"biographR (development version)","text":"Initial Github package.","code":""},{"path":"https://samuelfrederick.github.io/biographR/news/index.html","id":"biographr-0009001","dir":"Changelog","previous_headings":"","what":"biographR 0.0.0.9001","title":"biographR 0.0.0.9001","text":"Added function [clean_columns()] post-process output [get_bio()] using ChatGPT Updated vignette [get_bio()] function","code":""},{"path":"https://samuelfrederick.github.io/biographR/news/index.html","id":"biographr-0009002","dir":"Changelog","previous_headings":"","what":"biographR 0.0.0.9002","title":"biographR 0.0.0.9002","text":"Added function [get_bio_function_call()] use function calling data extraction Added function [clean_columns_function_call()] use function calling column cleaning Added option -shot prompting [get_bio()], [get_bio_function_call()], [clean_columns()], [clean_columns_function_call()] Added option return biographical information multiple individuals one biographical text [get_bio()] Added optional random seed ChatGPT output openai_seed argument Added article improving model outputs Added article [clean_columns()] Updated article [get_bio()]","code":""}]
